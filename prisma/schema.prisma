generator client {
  provider = "prisma-client-js"
  version  = "4.12.0"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  username      String
  nationality   String          @default("")
  email         String          @unique
  password      String
  phoneNumber   String
  tokens        tokens[]
  role          UserRole        @default(user)
  UserTeam      UserTeam?
  leagueMembers leagueMembers[]
  league        league[]
}

model Players {
  playerName  String      @id
  image       String
  nationality String
  cost        Int
  lane        Lane
  teamId      String
  team        Team        @relation(fields: [teamId], references: [teamName])
  otp         String      @default("")
  toplaner    UserTeam[]  @relation("toplaner")
  jungler     UserTeam[]  @relation("jungler")
  midlaner    UserTeam[]  @relation("midlaner")
  botlaner    UserTeam[]  @relation("botlaner")
  supporter   UserTeam[]  @relation("supporter")
  sup1        UserTeam[]  @relation("sup1")
  sup2        UserTeam[]  @relation("sup2")
  captin      UserTeam[]  @relation("captin")
  KDA         PlayerKDA[]
}

model Team {
  teamName String    @id
  image    String
  player   Players[]
  team1    Matches[] @relation("team1")
  team2    Matches[] @relation("team2")
}

model UserTeam {
  id                 Int     @id @default(autoincrement())
  budget             Int     @default(100000000)
  userId             Int     @unique
  user               Users   @relation(fields: [userId], references: [id])
  toplanerId         String
  toplaner           Players @relation(fields: [toplanerId], references: [playerName], name: "toplaner")
  junglerId          String
  jungler            Players @relation(fields: [junglerId], references: [playerName], name: "jungler")
  midlanerId         String
  midlaner           Players @relation(fields: [midlanerId], references: [playerName], name: "midlaner")
  botlanerId         String
  botlaner           Players @relation(fields: [botlanerId], references: [playerName], name: "botlaner")
  supporterId        String
  supporter          Players @relation(fields: [supporterId], references: [playerName], name: "supporter")
  sup1Id             String
  sup1               Players @relation(fields: [sup1Id], references: [playerName], name: "sup1")
  sup2Id             String
  sup2               Players @relation(fields: [sup2Id], references: [playerName], name: "sup2")
  captinId           String
  captin             Players @relation(fields: [captinId], references: [playerName], name: "captin")
  tripleCaptinStatus Boolean @default(false)
  allInStatus        Boolean @default(false)
  teamFanStatus      Boolean @default(false)
  points             Int     @default(0)
  transfers          Int     @default(2)
  tripleCaptin       Int     @default(1) //triple points for the captin
  allIn              Int     @default(1) // count points for sup players
  teamFan            Int     @default(1) //remove two max players condition form each team
  nextWeekPoints     Int     @default(0)
}

model Matches {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  team1Id String
  team2Id String
  team1   Team     @relation(fields: [team1Id], references: [teamName], name: "team1")
  team2   Team     @relation(fields: [team2Id], references: [teamName], name: "team2")
}

model PlayerKDA {
  id         Int     @id @default(autoincrement())
  playerId   String
  player     Players @relation(fields: [playerId], references: [playerName])
  games      Int
  winRate    String
  KDA        Float
  avgKills   Float
  MVB        Boolean @default(false)
  avgAssists Float
  CSM        Float
  VSPM       Float
  FB         Boolean @default(false)
  avgDeaths  Float
  points     Int     @default(0)
  week       Int
}

model tokens {
  id        Int      @id @default(autoincrement())
  userId    Int
  expiresAt DateTime
  user      Users    @relation(fields: [userId], references: [id])
}

model league {
  id            Int             @id @default(autoincrement())
  name          String
  founderId     Int
  founder       Users           @relation(references: [id], fields: [founderId])
  leagueMembers leagueMembers[]
}

model leagueMembers {
  leagueId Int
  league   league @relation(fields: [leagueId], references: [id])
  memberId Int
  member   Users  @relation(fields: [memberId], references: [id])

  @@id([leagueId, memberId])
}

enum UserRole {
  user
  admin
}

enum Lane {
  toplane
  jungle
  midlane
  botlane
  support
}
